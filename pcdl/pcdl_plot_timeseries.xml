<tool id="pcdl_plot_timeseries" name="pcdl_plot_timeseries" version="3.0.0+galaxy0" python_template_version="3.5" profile="21.05">
    <requirements>
        <requirement type="package" version="3.3.6">pcdl</requirement>
    </requirements>

    <stdio> <exit_code range=":" level="log" description="hello world!"/> </stdio>
    <command><![CDATA[
        #import re
        mkdir output_pc &&
        #for $file in $path:
            #set $filename = re.sub('[^\w\-\.\s]', '_', str($file.element_identifier))
            ln -s $file output_pc/$filename &&
        #end for

        pcdl_plot_timeseries output_pc $focus_cat $focus_num $aggregate_num --custom_data_type $custom_data_type --microenv $microenv --physiboss $physiboss --settingxml "$settingxml" --verbose $verbose --frame $frame --z_slice "$z_slice" --logy $logy --ylim "$ylim" --secondary_y $secondary_y --subplots $subplots --sharex $sharex --sharey $sharey --linestyle $linestyle --linewidth "$linewidth" --cmap "$cmap" --color "$color" --grid $grid --legend $legend --yunit "$yunit" --title "$title" --figsizepx $figsizepx --ext $ext --figbgcolor "$figbgcolor"
    ]]></command>

    <inputs>
        <section name="positional_arguments" title="positional arguments:" expanded="true">
        <param
            name="path" label="path"
            type="data_collection" collection_type="list"
            help="path to the PhysiCell output data collection"
        />
        <param
            name="focus_cat" label="focus_cat"
            type="text" value="none" optional="false"
            help="categorical or boolean data column within dataframe specified under frame (pcdl_get_cell_attribute_list or pcdl_get_substrate_list). default is None, which is total, which is all agents or voxels, no categories. default is None."
        />
        <param
            name="focus_num" label="focus_num"
            type="text" value="none" optional="false"
            help="numerical data column within dataframe specified under frame (pcdl_get_cell_attribute_list or pcdl_get_substrate_list). default is None, which is count, agent or voxel count. default is None."
        />
        <param
            name="aggregate_num" label="aggregate_num"
            type="select" display="radio"
            help="aggregation function {max, mean, median, min, std, var} for focus_num data. default is mean."
        >
        <option value="max">max</option>
        <option value="mean" selected="true">mean</option>
        <option value="median">median</option>
        <option value="min">min</option>
        <option value="std">std</option>
        <option value="var">var</option>
        </param>
        </section>

        <section name="options" title="options:" expanded="true">
        <param
            name="custom_data_type" label="custom_data_type"
            type="text" value="" optional="true"
            help="parameter to specify custom_data variable types other than float (namely: int, bool, str) like this var:dtype myint:int mybool:bool mystr:str. downstream float and int will be handled as numeric, bool as Boolean, and str as categorical data. default is an empty string."
        />
        <param
            name="microenv" label="microenv"
            type="boolean" truevalue="true" falsevalue="false" checked="true"
            help="should the microenvironment be extracted and loaded into the df_cell dataframe? setting microenv to False will use less memory and speed up processing, similar to the original pyMCDS_cells.py script. default is True."
        />
        <param
            name="physiboss" label="physiboss"
            type="boolean" truevalue="true" falsevalue="false" checked="true"
            help="if found, should physiboss state data be extracted and loaded into the df_cell dataframe? default is True."
        />
        <param
            name="settingxml" label="settingxml"
            type="text" value="PhysiCell_settings.xml" optional="true"
            help="the settings.xml that is loaded, from which the cell type ID label mapping, is extracted, if this information is not found in the output xml file. set to None or False if the xml file is missing! default is PhysiCell_settings.xml."
        />
        <param
            name="verbose" label="verbose"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="setting verbose to True for more text output, while processing. default is False."
        />
        <param
            name="frame" label="frame"
            type="select" display="radio"
            help="to specifies the data dataframe from which the values are taken. cell: agent centric value. conc: whole domain centric substarte concentration values. default is cell."
        >
        <option value="cell" selected="true">cell</option>
        <option value="conc">conc</option>
        </param>
        <param
            name="z_slice" label="z_slice"
            type="text" value="none" optional="false"
            help="z-axis position to slice a 2D xy-plain out of the 3D mesh. if z_slice position numeric but not an exact mesh center coordinate, then z_slice will be adjusted to the nearest mesh center value, the smaller one, if set to None, the whole domain is taken. default is None."
        />
        <param
            name="logy" label="logy"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="if True, then y axis is natural log scaled. default is False."
        />
        <param
            name="ylim" label="ylim"
            type="text" value="none" optional="false"
            help="two floats separated by a space. y axis min and max value. None detects automatically detects min and max value. default is None."
        />
        <param
            name="secondary_y" label="secondary_y"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="whether to plot on the secondary y-axis. if a listing of string, which columns to plot on the secondary y-axis. default is False."
        />
        <param
            name="subplots" label="subplots"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="whether to split the plot into subplots, one per column. default is False."
        />
        <param
            name="sharex" label="sharex"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="in case subplots is True, share x-axis by setting some x-axis labels to invisible. default is False."
        />
        <param
            name="sharey" label="sharey"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="in case subplots is True, share y-axis range and possibly setting some y-axis labels to invisible. default is False."
        />
        <param
            name="linestyle" label="linestyle"
            type="select" display="radio"
            help="matplotlib line style {-, --, .-, :} string. default is - ."
        >
        <option value="-" selected="true">-</option>
        <option value="--">--</option>
        <option value=".-">.-</option>
        <option value=":">:</option>
        </param>
        <param
            name="linewidth" label="linewidth"
            type="text" value="none" optional="false"
            help="line width in points, integer. default is None."
        />
        <param
            name="cmap" label="cmap"
            type="text" value="none" optional="false"
            help="matplotlib colormap string from https://matplotlib.org/stable/tutorials/colors/colormaps.html . default is None."
        />

        <param
            name="color" label="color"
            type="text" value="none" optional="false"
            help="listing of color strings referred to by name, RGB or RGBA code. default is None."
        />
        <param
            name="grid" label="grid"
            type="boolean" truevalue="true" falsevalue="false" checked="true"
            help="plot axis grid lines. default is True."
        />
        <param
            name="legend" label="legend"
            type="select" display="radio"
            help="if True or reverse, place legend on axis subplots. default is True."
        >
        <option value="false">false</option>
        <option value="reverse">reverse</option>
        <option value="true" selected="true">true</option>
        </param>
        <param
            name="yunit" label="yunit"
            type="text" value="none" optional="false"
            help="string to specify y-axis unit. None will not print a unit on the y-axis. default is None."
        />
        <param
            name="title" label="title"
            type="text" value="none" optional="false"
            help="title to use for the plot. None will print no title. default is None."
        />
        <param
            name="figsizepx" label="figsizepx"
            type="text" value="640 480" optional="false"
            help="size of the figure in pixels (integer), x y. the given x and y will be rounded to the nearest even number, to be able to generate movies from the images. default is 640 480."
        />
        <param
            name="ext" label="ext"
            type="select" display="radio"
            help="output image format. possible formats are jpg, png, and tif. default is jpg."
        >
        <option value="jpg" selected="true">jpg</option>
        <option value="png">png</option>
        <option value="tif">tif</option>
        </param>
        <param
            name="figbgcolor" label="figbgcolor"
            type="text" value="none" optional="false"
            help="figure background color. None is transparent (png) or white (jpg, tif). default is None."
        />
        </section>
    </inputs>

    <outputs>
        <collection name="timeseries_plot" type="list">
            <discover_datasets pattern="(?P&lt;designation&gt;timeseries_.+)\..+" format="jpg" directory="output_pc" visible="false" />
        </collection>
    </outputs>

    <help><![CDATA[
this function to generate a timeseries plot and either returns a matplotlib figure or an image file (jpeg, png, tiff).

homepage: https://github.com/elmbeech/physicelldataloader
    ]]></help>

    <citations>
        <citation type="bibtex">
        @misc{githubphysicelldataloader,
            author = {Bucher, Elmar},
            year = {2025},
            title = {physicelldataloader},
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/elmbeech/physicelldataloader},
        }</citation>
    </citations>
</tool>
