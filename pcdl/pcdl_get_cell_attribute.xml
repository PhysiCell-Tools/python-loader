<tool id="pcdl_get_cell_attribute" name="pcdl_get_cell_attribute" version="3.0.0+galaxy0" python_template_version="3.5" profile="21.05">
    <requirements>
        <requirement type="package" version="3.3.6">pcdl</requirement>
    </requirements>

    <stdio> <exit_code range=":" level="log" description="hello world!"/> </stdio>
    <command><![CDATA[
        #import re
        mkdir output_pc &&
        #for $file in $path:
            #set $filename = re.sub('[^\w\-\.\s]', '_', str($file.element_identifier))
            ln -s $file output_pc/$filename &&
        #end for

        pcdl_get_cell_attribute output_pc $focus --custom_data_type $custom_data_type --microenv $microenv --physiboss $physiboss --settingxml "$settingxml" --verbose $verbose --drop $drop --keep $keep --allvalues $allvalues
    ]]></command>

    <inputs>
        <section name="positional_arguments" title="positional arguments:" expanded="true">
        <param
            name="path" label="path"
            type="data_collection" collection_type="list"
            help="path to the PhysiCell output data collection"
        />
        <param
            name="focus" label="values"
            type="integer" value="1" optional="false"
            help="minimal number of values a variable has to have in any of the mcds time steps to be outputted. variables that have only 1 state carry no information. None is a state too. default is 1."
        />
        </section>

        <section name="options" title="options:" expanded="true">
        <param
            name="custom_data_type" label="custom_data_type"
            type="text" value="" optional="true"
            help="parameter to specify custom_data variable types other than float (namely: int, bool, str) like this var:dtype myint:int mybool:bool mystr:str. downstream float and int will be handled as numeric, bool as Boolean, and str as categorical data. default is an empty string."
        />
        <param
            name="microenv" label="microenv"
            type="boolean" truevalue="true" falsevalue="false" checked="true"
            help="should the microenvironment be extracted and loaded into the df_cell dataframe? setting microenv to False will use less memory and speed up processing, similar to the original pyMCDS_cells.py script. default is True."
        />
        <param
            name="physiboss" label="physiboss"
            type="boolean" truevalue="true" falsevalue="false" checked="true"
            help="if found, should physiboss state data be extracted and loaded into the df_cell dataframe? default is True."
        />
        <param
            name="settingxml" label="settingxml"
            type="text" value="PhysiCell_settings.xml" optional="true"
            help="the settings.xml that is loaded, from which the cell type ID label mapping, is extracted, if this information is not found in the output xml file. set to None or False if the xml file is missing! default is PhysiCell_settings.xml."
        />
        <param
            name="verbose" label="verbose"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="setting verbose to True for more text output, while processing. default is False."
        />
        <param
            name="drop" label="drop"
            type="text" value="" optional="true"
            help="set of column labels to be dropped for the dataframe. don't worry: essential columns like ID, coordinates and time will never be dropped. Attention: when the keep parameter is given, then the drop parameter has to be an empty string! default is an empty string."
        />
        <param
            name="keep" label="keep"
            type="text" value="" optional="true"
            help="set of column labels to be kept in the dataframe. set values=1 to be sure that all variables are kept. don't worry: essential columns like ID, coordinates and time will always be kept. default is an empty string."
        />
        <param
            name="allvalues" label="allvalues"
            type="boolean" truevalue="true" falsevalue="false" checked="false"
            help="for numeric data, should only the min and max values or all values be returned? default is false."
        />
        </section>
    </inputs>

    <outputs>
        <collection name="cell_attribute_json" type="list">
            <discover_datasets pattern="(?P&lt;designation&gt;timeseries_cell_attribute_.+)\.json" format="json" directory="output_pc" visible="false" />
        </collection>
    </outputs>

    <help><![CDATA[
function to detect informative variables in a time series. this function detects even variables which have less than the minimal state count in each time step, but different values from time step to time step. the output is a json file with an entry of all non-coordinate column names that at least in one of the time steps or in between time steps, reach the given minimal value count. key is the column name, mapped is a list of all values (bool, str, and, if allvalues is True, int and float) or a list with minimum and maximum values (int, float).

homepage: https://github.com/elmbeech/physicelldataloader
    ]]></help>

    <citations>
        <citation type="bibtex">
        @misc{githubphysicelldataloader,
            author = {Bucher, Elmar},
            year = {2025},
            title = {physicelldataloader},
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/elmbeech/physicelldataloader},
        }</citation>
    </citations>
</tool>
